/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;

export interface DetailsResponse {
  /**
   * arbiter can decide to approve or refund the escrow
   */
  arbiter: string;
  /**
   * Balance in cw20 tokens
   */
  cw20_balance: Cw20Coin[];
  /**
   * Whitelisted cw20 tokens
   */
  cw20_whitelist: string[];
  /**
   * When end height set and block height exceeds this value, the escrow is expired. Once an escrow is expired, it can be returned to the original funder (via "refund").
   */
  end_height?: number | null;
  /**
   * When end time (in seconds since epoch 00:00:00 UTC on 1 January 1970) is set and block time exceeds this value, the escrow is expired. Once an escrow is expired, it can be returned to the original funder (via "refund").
   */
  end_time?: number | null;
  /**
   * id of this escrow
   */
  id: string;
  /**
   * Balance in native tokens
   */
  native_balance: Coin[];
  /**
   * if approved, funds go to the recipient
   */
  recipient: string;
  /**
   * if refunded, funds go to the source
   */
  source: string;
  [k: string]: unknown;
}
export interface Cw20Coin {
  address: string;
  amount: Uint128;
  [k: string]: unknown;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
