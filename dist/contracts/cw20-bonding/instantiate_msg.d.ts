/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CurveType =
  | {
      constant: {
        scale: number;
        value: Uint128;
        [k: string]: unknown;
      };
    }
  | {
      linear: {
        scale: number;
        slope: Uint128;
        [k: string]: unknown;
      };
    }
  | {
      square_root: {
        scale: number;
        slope: Uint128;
        [k: string]: unknown;
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;

export interface InstantiateMsg {
  /**
   * enum to store the curve parameters used for this contract if you want to add a custom Curve, you should make a new contract that imports this one. write a custom `instantiate`, and then dispatch `your::execute` -> `cw20_bonding::do_execute` with your custom curve as a parameter (and same with `query` -> `do_query`)
   */
  curve_type: CurveType;
  /**
   * number of decimal places of the supply token, needed for proper curve math. If it is eg. BTC, where a balance of 10^8 means 1 BTC, then use 8 here.
   */
  decimals: number;
  /**
   * name of the supply token
   */
  name: string;
  /**
   * number of decimal places for the reserve token, needed for proper curve math. Same format as decimals above, eg. if it is uatom, where 1 unit is 10^-6 ATOM, use 6 here
   */
  reserve_decimals: number;
  /**
   * this is the reserve token denom (only support native for now)
   */
  reserve_denom: string;
  /**
   * symbol / ticker of the supply token
   */
  symbol: string;
  [k: string]: unknown;
}
