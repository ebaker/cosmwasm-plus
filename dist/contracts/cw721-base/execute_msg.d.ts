/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This is like Cw721ExecuteMsg but we add a Mint command for an owner to make this stand-alone. You will likely want to remove mint and use other control logic in any contract that inherits this.
 */
export type ExecuteMsg =
  | {
      transfer_nft: {
        recipient: string;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      send_nft: {
        contract: string;
        msg?: Binary | null;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      approve: {
        expires?: Expiration | null;
        spender: string;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      revoke: {
        spender: string;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      approve_all: {
        expires?: Expiration | null;
        operator: string;
        [k: string]: unknown;
      };
    }
  | {
      revoke_all: {
        operator: string;
        [k: string]: unknown;
      };
    }
  | {
      mint: MintMsg;
    };
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;
/**
 * Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)
 */
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {
        [k: string]: unknown;
      };
    };
/**
 * A point in time in nanosecond precision.
 *
 * This type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.
 */
export type Timestamp = Uint64;
/**
 * A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u64` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);
 *
 * let b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```
 */
export type Uint64 = string;

export interface MintMsg {
  /**
   * Describes the asset to which this NFT represents (may be empty)
   */
  description?: string | null;
  /**
   * A URI pointing to an image representing the asset
   */
  image?: string | null;
  /**
   * Identifies the asset to which this NFT represents
   */
  name: string;
  /**
   * The owner of the newly minter NFT
   */
  owner: string;
  /**
   * Unique ID of the NFT
   */
  token_id: string;
  [k: string]: unknown;
}
