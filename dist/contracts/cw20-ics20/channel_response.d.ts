/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Amount =
  | {
      native: Coin;
    }
  | {
      cw20: Cw20Coin;
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;

export interface ChannelResponse {
  /**
   * How many tokens we currently have pending over this channel
   */
  balances: Amount[];
  /**
   * Information on the channel's connection
   */
  info: ChannelInfo;
  /**
   * The total number of tokens that have been sent over this channel (even if many have been returned, so balance is low)
   */
  total_sent: Amount[];
  [k: string]: unknown;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Cw20Coin {
  address: string;
  amount: Uint128;
  [k: string]: unknown;
}
export interface ChannelInfo {
  /**
   * the connection this exists on (you can use to query client/consensus info)
   */
  connection_id: string;
  /**
   * the remote channel/port we connect to
   */
  counterparty_endpoint: IbcEndpoint;
  /**
   * id of this channel
   */
  id: string;
  [k: string]: unknown;
}
export interface IbcEndpoint {
  channel_id: string;
  port_id: string;
  [k: string]: unknown;
}
