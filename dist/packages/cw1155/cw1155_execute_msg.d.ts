/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Cw1155ExecuteMsg =
  | {
      send_from: {
        from: string;
        /**
         * `None` means don't call the receiver interface
         */
        msg?: Binary | null;
        /**
         * If `to` is not contract, `msg` should be `None`
         */
        to: string;
        token_id: string;
        value: Uint128;
        [k: string]: unknown;
      };
    }
  | {
      batch_send_from: {
        batch: [string, Uint128][];
        from: string;
        /**
         * `None` means don't call the receiver interface
         */
        msg?: Binary | null;
        /**
         * if `to` is not contract, `msg` should be `None`
         */
        to: string;
        [k: string]: unknown;
      };
    }
  | {
      mint: {
        /**
         * `None` means don't call the receiver interface
         */
        msg?: Binary | null;
        /**
         * If `to` is not contract, `msg` should be `None`
         */
        to: string;
        token_id: string;
        value: Uint128;
        [k: string]: unknown;
      };
    }
  | {
      batch_mint: {
        batch: [string, Uint128][];
        /**
         * `None` means don't call the receiver interface
         */
        msg?: Binary | null;
        /**
         * If `to` is not contract, `msg` should be `None`
         */
        to: string;
        [k: string]: unknown;
      };
    }
  | {
      burn: {
        from: string;
        token_id: string;
        value: Uint128;
        [k: string]: unknown;
      };
    }
  | {
      batch_burn: {
        batch: [string, Uint128][];
        from: string;
        [k: string]: unknown;
      };
    }
  | {
      approve_all: {
        expires?: Expiration | null;
        operator: string;
        [k: string]: unknown;
      };
    }
  | {
      revoke_all: {
        operator: string;
        [k: string]: unknown;
      };
    };
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)
 */
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {
        [k: string]: unknown;
      };
    };
/**
 * A point in time in nanosecond precision.
 *
 * This type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.
 */
export type Timestamp = Uint64;
/**
 * A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u64` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);
 *
 * let b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```
 */
export type Uint64 = string;
